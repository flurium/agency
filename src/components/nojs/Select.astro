---
type Props = {
  class?: string
  name: string
  placeholder: string
  options: { value: string; label: string }[]
}

const { class: className, name, placeholder, options } = Astro.props

const triggerStyle =
  "text-left rounded py-3 px-6 border border-gray-200 cursor-pointer min-w-[14rem] select-none bg-white"
---

<div class:list={["relative", className]}>
  {
    options.map((option) => (
      <Fragment>
        <input
          type="radio"
          id={`${option.value}-${name}`}
          name={name}
          value={option.value}
          class="hidden"
        />
        <button class:list={["check", triggerStyle]} tabindex="0">
          {option.label}
        </button>
        <button class:list={["uncheck", triggerStyle]} tabindex="0">
          {option.label}
        </button>
      </Fragment>
    ))
  }
  <button class:list={["placeholder check", triggerStyle]} tabindex="0">
    {placeholder}
  </button>
  <button tabindex="0" class:list={["placeholder uncheck", triggerStyle]}>
    {placeholder}
  </button>

  <div
    class="options rounded p-3 border border-gray-200 z-50 transition-opacity bg-white min-w-[14rem]"
  >
    {
      options.map((option) => (
        <label
          for={`${option.value}-${name}`}
          class="block hover:bg-gray-100 px-3 pb-2 pt-1 rounded cursor-pointer"
        >
          {option.label}
        </label>
      ))
    }
  </div>
</div>

<style>
  .options {
    position: absolute;
    top: 3.5rem;
    width: 100%;
    opacity: 0;
    z-index: 50;
    pointer-events: none;
  }

  .options:active,
  .check:focus ~ .options,
  .check:focus-within ~ .options {
    opacity: 1;
    pointer-events: all;
  }

  /* 
    When position is static top doesn't matter and element will be displayed as usual.
    When position is fixed then top will make them appear outside of screen.
  */
  .check,
  .uncheck {
    position: fixed;
    top: -100%;
  }

  .placeholder.check,
  .placeholder.check:focus + .placeholder.uncheck,
  input[type="radio"]:checked + .check,
  input[type="radio"]:checked + .check:focus + .uncheck {
    position: static;
  }

  .check:focus {
    position: fixed !important;
  }

  input[type="radio"]:checked ~ .placeholder.check,
  input[type="radio"]:checked ~ .placeholder.uncheck {
    position: fixed !important;
  }
</style>
